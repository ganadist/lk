// Copyright 2016 The Fuchsia Authors
//
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT

#pragma once

#include <kernel/mutex.h>
#include <kernel/event.h>

#include <magenta/dispatcher.h>
#include <magenta/io_port_observer.h>
#include <magenta/types.h>

#include <utils/fifo_buffer.h>
#include <sys/types.h>

// A Packet can be either a user packet from Queue() or
// one generated by a state change on a bound dispatcher.
struct IOP_Packet {
    union {
        mx_io_packet_t io;
        mx_user_packet_t user;
    } u;
};

class IOPortDispatcher final : public Dispatcher {
public:
    static status_t Create(uint32_t options,
                           utils::RefPtr<Dispatcher>* dispatcher,
                           mx_rights_t* rights);

    ~IOPortDispatcher() final;
    mx_obj_type_t GetType() const final { return MX_OBJ_TYPE_IOPORT; }
    IOPortDispatcher* get_io_port_dispatcher() final { return this; }

    mx_status_t Queue(const IOP_Packet* packet);
    mx_status_t Wait(IOP_Packet* packet);

    // Called under the handle table lock.
    mx_status_t Bind(Handle* handle, mx_signals_t signals, uint64_t key);
    mx_status_t Unbind(Handle* handle, uint64_t key);

    void CancelObserver(IOPortObserver* observer);

private:
    IOPortDispatcher(uint32_t options);
    mx_status_t Init(uint32_t depth);

    utils::unique_ptr<IOPortObserver> MaybeRemoveObserver(IOP_Packet* packet);

    const uint32_t options_;

    mutex_t lock_;
    utils::FifoBuffer<IOP_Packet> packets_;
    utils::DoublyLinkedList<IOPortObserver*, IOPortObserverListTraits> observers_;

    event_t event_;
};
